// Mandelbrot Set Visualizer - Iterative version
// Uses while loops instead of recursion

// Check if a point is in the Mandelbrot set
// Returns true if in set, false if escaped
function in_mandelbrot(cx: Flt, cy: Flt, max_iter: Int): Bool {
    let var zx = 0.0;
    let var zy = 0.0;
    let var iter = 0;
    let var escaped = 0;  // 0 = still iterating, 1 = escaped

    while iter < max_iter and escaped = 0 {
        let zx2 = zx * zx;
        let zy2 = zy * zy;

        if zx2 + zy2 > 4.0 {
            // Escaped - not in set
            escaped := 1;
            0
        } else {
            // Continue iterating
            let new_zy = 2.0 * zx * zy + cy;
            zx := zx2 - zy2 + cx;
            zy := new_zy;
            iter := iter + 1;
            0
        }
    };

    // If we didn't escape, point is in set
    escaped = 0
};

// Main visualization function
function visualize(): Int {
    let width = 60;
    let height = 30;
    let max_iter = 50;

    // Mandelbrot set bounds
    let x_min = -2.0;
    let x_max = 1.0;
    let y_min = -1.0;
    let y_max = 1.0;

    let dx = (x_max - x_min) / 60.0;
    let dy = (y_max - y_min) / 30.0;

    // Iterate through each row
    let var row = 0;
    while row < height {
        // Calculate y coordinate (flip for correct orientation)
        let y_flt = 1.0 * row;
        let cy = y_max - y_flt * dy;

        // Build the row string
        let var line = '';
        let var col = 0;
        while col < width {
            // Calculate x coordinate
            let x_flt = 1.0 * col;
            let cx = x_min + x_flt * dx;

            // Check if point is in set
            if in_mandelbrot(cx: cx, cy: cy, max_iter: max_iter) {
                line := line + '*'
            } else {
                line := line + '.'
            };

            col := col + 1
        };

        // Output the completed row
        output(line);
        row := row + 1
    };

    0
};

// Run the visualization
visualize()
