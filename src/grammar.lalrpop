use crate::syntax::{Operator,DataType,Param,KeywordArg,Expr, Function, LiteralData};

grammar;

pub Expr: Expr = {
    ExprBlock,
    ExprIf,
    ExprWhile,
    ExprLet,
    ExprDefineFunction,
    ExprLambda,
    ExprAssign,
};


ExprBlock: Expr = {
  "{" <s:SemiSeparated<Expr>> "}" => Expr::Block {body:s, environment: 0}.into(),  
}

ExprLet: Expr = "let" <n: ident> "=" <r:Expr> => Expr::Let {var_name: n, data_type: DataType::Any, index: (0,0),value: Box::new(r)}.into();
ExprIf: Expr = "if" <t:ExprLogicOr>  <c:ExprBlock> "else" <b:ExprBlock> => Expr::If {cond: Box::new(t), then: Box::new(c), final_else: Box::new(b) }.into();
ExprWhile: Expr =  "while" <c:ExprLogicOr> <b:ExprBlock> => Expr::While { cond: Box::new(c), body: Box::new(b)}.into();
ExprDefineFunction: Expr  = "function" <n: ident>  <f:DefFunction> => Expr::DefineFunction {fn_name: n,index: (0,0), value: Box::new(f)}.into();
ExprLambda: Expr = "Lambda" <f:LambdaFunction> => Expr::Lambda { value: f, environment: 0}.into();

DefFunction: Expr = "(" <pm:CommaSeparated<Param>> ")" ":" <rt:DataType> <b:ExprBlock> => Expr::Lambda { value: Function { body: Box::new(b), params: pm, return_type: rt}, environment: 0}.into();
LambdaFunction: Function = "(" <lpm:CommaSeparated<Param>> ")"  ":" <dt:DataType> <b:ExprBlock> => Function { params: lpm, body: Box::new(b), return_type: dt };  
  

ExprAssign = {
  // TODO put assignment here too

    ExprLogicOr,
}

ExprLogicOr = ExprInfix<ExprLogicOr, OpLogicOr, ExprLogicAnd>;
OpLogicOr: Operator = "or" => Operator::Or;
ExprLogicAnd = ExprInfix<ExprLogicAnd, OpLogicAnd, ExprEquality>;
OpLogicAnd: Operator = "and" => Operator::And;
ExprEquality = ExprInfix<ExprEquality, OpEquality, ExprComparison>;

OpEquality: Operator = {
    "=" => Operator::Eq,
    "<>" => Operator::Neq,
}

ExprComparison = ExprInfix<ExprComparison, OpComparison, ExprArithmetic>;
OpComparison: Operator = {
    ">" => Operator::Gt,
    ">=" => Operator::Gte,
    "<" => Operator::Lt,
    "<=" => Operator::Lte,    
}


ExprArithmetic: Expr = {	      
    <l:ExprArithmetic> "+" <r:Factor> => Expr::add(l, r).into(),
    <l:ExprArithmetic> "-" <r:Factor> => Expr::sub(l, r).into(),
    Factor,
};

SemiSeparated<T>: Vec<T> = { 
    <s:(<T> ";")*> <e:T?> => match e {
        None => s,
        Some(e) => {
            let mut s = s;
            s.push(e);
            s
        }
    }
};


Factor: Expr = {
    <l:Factor> "*" <r:Term> => Expr::mul(l, r).into(),
    <l:Factor> "/" <r:Term> => Expr::div(l, r).into(),
    Term,
};

Term: Expr = {
    "(" <e:Expr> ")" => e,    
    LiteralData => Expr::Literal(<>),    
    <i:ident> "(" <a:CommaSeparated<KeywordArg>> ")" => Expr::Call{ fn_name:i, args: a, index: (0,0)},
    <v:ident> => Expr::Variable { name:v.to_string(), index: (0,0)},
};

KeywordArg: KeywordArg = {
	<k:ident> ":" <e:Expr> => KeywordArg { name: k.to_string(),value: e}, 
}

Param:  Param = {
    <p:ident> ":" <t:DataType> => Param { name: p.to_string(),data_type: t, default: None, index: (0,0)}, 
}

pub DataType : DataType = {
    "Int" => DataType::Int,
    "Flt" => DataType::Flt,
    "Str" => DataType::Str,
    "Bool" => DataType::Bool,    
    "List of" <e: DataType> => DataType::List { element_type: Box::new(e)},
};

CommaSeparated<T>: Vec<T> = { 
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};


pub LiteralData: LiteralData = {
    int => LiteralData::from(<>),
    flt => LiteralData::from(<>),
    str => LiteralData::from(<>),
    bool => LiteralData::from(<>),  
};

flt: f64 = {
  <s:r"[0-9]+\.[0-9]+"> => s.parse().unwrap(),
};

str: String= {  
  <i:r"'([^'])*'"> => i.to_string(),
};

int: i64 = {
  <s:r"[0-9]+"> => s.parse().unwrap(),
};

bool: bool = {
  "true" => true,
  "false" => false,
};

ident: String = {
  <i:r"[a-zA-Z][a-zA-Z0-9_-]*"> => i.to_string(),
};

ExprInfix<Lt, Op, Rt>: Expr = {
    <lt:Lt> <op:Op> <rt:Rt> =>
        Expr::BinaryExpr { left: Box::new(lt), op, right: Box::new(rt)} ,
    Rt,
}

