use crate::syntax::{Operator,DataType,Param,KeywordArg,Expr};
grammar;

pub Expr: Expr = {
    "if" <t:Expr> "then"  <c:Expr> "else" <e:Expr> => Expr::If {cond: Box::new(t), then: Box::new(c), final_else: Box::new(e) }.into(),
    "while" <c:Expr> "do" <b:Expr> => Expr::While { cond: Box::new(c), body: Box::new(b)}.into(),
    Block,        
    <l:Expr> "+" <r:Factor> => Expr::add(l, r).into(),
    <l:Expr> "-" <r:Factor> => Expr::sub(l, r).into(),
    Factor,,    
};

Block: Expr = {
  "{" <s:SemiSeparated<Expr>> "}" => Expr::Block(s).into(),
};

SemiSeparated<T>: Vec<T> = { 
    <s:(<T> ";")*> <e:T?> => match e {
        None => s,
        Some(e) => {
            let mut s = s;
            s.push(e);
            s
        }
    }
};


Factor: Expr = {
    <l:Factor> "*" <r:Term> => Expr::mul(l, r).into(),
    <l:Factor> "/" <r:Term> => Expr::div(l, r).into(),
    Term,
};

Term: Expr = {
    "(" <e:Expr> ")" => e,    
    <l:LiteralData> => Expr::LiteralData(l),        
    <f:FunctionCall> =>f,
    <v:ident> => Expr::Variable(v.to_string()),

};

pub FunctionCall: Expr = {
  <i:ident> "(" <a:CommaSeparated<Expr>> ")" => Expr::Call{ name:i, args: a},
};

CommaSeparated<T>: Vec<T> = { 
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

LiteralData: LiteralData = {
    int => LiteralData::from(<>),
    flt => LiteralData::from(<>),
    str => LiteralData::from(<>),
    bool => LiteralData::from(<>),  
};

flt: f64 = {
  <s:r"[0-9]+\.[0-9]+"> => s.parse().unwrap(),
};

int: i64 = {
  <s:r"[0-9]+"> => s.parse().unwrap(),
};

str: String= {
  <i:r#"[\"*\"]"#> => i.to_string(),  
}

bool: Bool = {
  "true" => true,
  "false" => false,
}

ident: String = {
  <i:r"[a-zA-Z][a-zA-Z0-9_-]*"> => i.to_string(),
};
